Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Arnold Jiang

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures: 1 - 10

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such documents include the course's lecture slides and precept handouts.

The course's textbooks.

The man pages on the armlab cluster.

The course's current staff members outside of class time through office hours.

Donna's office hours

The course's current staff members outside of class time through meetings.
Donna Gabai

The course's current staff members outside of class time through Ed.

The course's current staff members outside of class time through e-mail.

Current Intro Lab TAs through visits to the Intro COS Lab.
Konstantin
Leo
Pascal

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None 

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

The hash expand function had to be the most confusing part of this
assignment. I thought it was good for learning about pointer notation.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?


------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

   symtablelist.c: line 71: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablelist.c: line 109: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablelist.c: line 198: medium priority:
   Do you want to validate 'pvExtra' through an assert?

   pvValue in line 71 & line 109 should not be asserted to be != to NULL
   because a SymTable object is not responsible for allocating the
   memory in which its values reside. This means that the value could be
   NULL. 

   pvExtra in line 198 should not be asserted to be != to NULL becuase
   on line 427 in testsymtable.c, NULL can be passed as an argument

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

   symtablehash.c: line 95: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 136: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 237: medium priority:
   Do you want to validate 'pvExtra' through an assert?

   pvValue in line 95 & line 136 should not be asserted to be != to NULL
   because a SymTable object is not responsible for allocating the
   memory in which its values reside. This means that the value could be
   NULL. 

   pvExtra in line 237 should not be asserted to be != to NULL becuase
   on line 427 in testsymtable.c, NULL can be passed as an argument

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.10898 seconds.
-- 5000 bindings consumed 1.622032 seconds.
-- 50000 bindings consumed 161.708411 seconds.
-- 500000 bindings consumed More than 5 Minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.006897 seconds.
-- 50000 bindings consumed 0.489345 seconds.
-- 500000 bindings consumed 105.526598 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.005736 seconds.
-- 50000 bindings consumed 0.135265 seconds.
-- 500000 bindings consumed 2.112026 seconds.
